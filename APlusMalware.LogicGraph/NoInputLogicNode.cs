// <copyright file="NoInputLogicNode.cs" company="aplusmalware.com">
//
// Copyright (c) 2016 A+ Malware
// All rights reserved. 
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software 
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// </copyright>
// <author>A+ Malware</author>

namespace APlusMalware.LogicGraph
{
    using System;

    /// <summary>
    /// Takes no input.
    /// </summary>
    /// <typeparam name="T">The type of the value of input and output.</typeparam>
    public class NoInputLogicNode<T> : UnifiedOutputLogicNode<T>
    {
        /// <summary>
        /// The output.
        /// </summary>
        private T _output;

        /// <summary>
        /// Gets the maximum number of inputs supported.
        /// </summary>
        public sealed override Int32 MaxInputCount { get { return 0; } }

        /// <summary>
        /// Gets the maximum number of outputs supported.
        /// </summary>
        public override int MaxOutputCount { get { return 1; } }
        
        /// <summary>
        /// Gets the values of the inputs.
        /// </summary>
        public sealed override T[] InputValues
        {
            get
            {
                return new T[0];
            }
        }

        /// <summary>
        /// Sets the value of the output.
        /// </summary>
        /// <param name="output">The value to set.</param>
        public void SetOutput(T output)
        {
            _output = output;
        }

        /// <summary>
        /// Updates the the outputs based on the input.
        /// </summary>
        protected sealed override void InternalUpdate()
        {
            SetAllOutputs(_output);
        }
    }
}
