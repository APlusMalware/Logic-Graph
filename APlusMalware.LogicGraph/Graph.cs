using System;
using System.Collections.Generic;
using System.Linq;

namespace APlusMalware.LogicGraph
{
    public class Graph<T>
    {
        private readonly HashSet<LogicNode<T>> _nodes;
        

        public Int32 StepCount { get; private set; }

        public Graph()
        {
            _nodes = new HashSet<LogicNode<T>>();
        }

        public void AddNode(LogicNode<T> node)
        {
            _nodes.Add(node);
        }

        public void AddManyNodes(IEnumerable<LogicNode<T>> nodes)
        {
            _nodes.UnionWith(nodes);
        }

        public void RemoveNode(LogicNode<T> node)
        {
            _nodes.Remove(node);
        }

        public void Step()
        {
            HashSet<LogicNode<T>> finishedNodes = new HashSet<LogicNode<T>>();
            HashSet<LogicNode<T>> unfinishedNodes = new HashSet<LogicNode<T>>();
            foreach (var n in _nodes)
            {
                if (n.AreAllSet)
                    finishedNodes.Add(n);
                else
                    unfinishedNodes.Add(n);
            }

            HashSet<LogicNode<T>> partiallyFinished = new HashSet<LogicNode<T>>();

            while (unfinishedNodes.Count > 0)
            {
                HashSet<LogicNode<T>> newlyFinished = new HashSet<LogicNode<T>>();
                if (finishedNodes.Count == 0)
                {
                    LogicNode<T> node;
                    if (partiallyFinished.Count > 0)
                    {
                        node = partiallyFinished.First();

                        partiallyFinished.Remove(node);
                    }
                    else if (unfinishedNodes.Count > 0)
                    {
                        node = unfinishedNodes.First();
                    }
                    else
                    {
                        throw new Exception("This really shouldn't happen.");
                    }

                    finishedNodes.Add(node);
                }
                foreach (var n in finishedNodes)
                {
                    unfinishedNodes.Remove(n);
                    n.Update(StepCount);
                    foreach (var o in n.OutNodes)
                    {
                        if (o == null) continue;
                        if (o.AreAllSet)
                        {
                            partiallyFinished.Remove(o);
                            if (o.LastStep != StepCount)
                                newlyFinished.Add(o);
                        }
                        else
                        {
                            partiallyFinished.Add(o);
                        }
                    }
                }
                finishedNodes = newlyFinished;

            }

            StepCount++;
        }
    }
}
