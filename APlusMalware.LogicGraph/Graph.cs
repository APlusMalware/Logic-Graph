// <copyright file="Graph.cs" company="aplusmalware.com">
//
// Copyright (c) 2016 A+ Malware
// All rights reserved. 
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software 
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// </copyright>
// <author>A+ Malware</author>

namespace APlusMalware.LogicGraph
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A graph of logic nodes.
    /// </summary>
    /// <typeparam name="T">Type of object wthin the logic node.</typeparam>
    public class Graph<T>
    {
        /// <summary>
        /// All nodes within the graph.
        /// </summary>
        private readonly HashSet<LogicNode<T>> _nodes;

        /// <summary>
        /// Initializes a new instance of the Graph class.
        /// </summary>
        public Graph()
        {
            _nodes = new HashSet<LogicNode<T>>();
        }

        /// <summary>
        /// Gets the number of update steps that have been performed.
        /// </summary>
        public Int32 StepCount { get; private set; }

        /// <summary>
        /// Adds a LogicNode to the graph.
        /// </summary>
        /// <param name="node">The LogicNode to add.</param>
        public void AddNode(LogicNode<T> node)
        {
            _nodes.Add(node);
        }

        /// <summary>
        /// Adds multiple LogicNodes to the graph.
        /// </summary>
        /// <param name="nodes">The IEnumerable of all the nodes to add.</param>
        public void AddManyNodes(IEnumerable<LogicNode<T>> nodes)
        {
            _nodes.UnionWith(nodes);
        }

        /// <summary>
        /// Removes a LogicNode from the graph.
        /// </summary>
        /// <param name="node">The LogicNode to remove.</param>
        public void RemoveNode(LogicNode<T> node)
        {
            _nodes.Remove(node);
        }

        /// <summary>
        /// Performs a logic step. Updates all completely updated LogicNodes first, followed by partially updated nodes.
        /// </summary>
        public void Step()
        {
            HashSet<LogicNode<T>> finishedNodes = new HashSet<LogicNode<T>>();
            HashSet<LogicNode<T>> unfinishedNodes = new HashSet<LogicNode<T>>();
            foreach (var n in _nodes)
            {
                if (n.AreAllSet)
                    finishedNodes.Add(n);
                else
                    unfinishedNodes.Add(n);
            }

            HashSet<LogicNode<T>> partiallyFinished = new HashSet<LogicNode<T>>();

            while (unfinishedNodes.Count > 0)
            {
                HashSet<LogicNode<T>> newlyFinished = new HashSet<LogicNode<T>>();
                if (finishedNodes.Count == 0)
                {
                    LogicNode<T> node;
                    if (partiallyFinished.Count > 0)
                    {
                        node = partiallyFinished.First();

                        partiallyFinished.Remove(node);
                    }
                    else if (unfinishedNodes.Count > 0)
                    {
                        node = unfinishedNodes.First();
                    }
                    else
                    {
                        throw new Exception("This really shouldn't happen.");
                    }

                    finishedNodes.Add(node);
                }
                foreach (var n in finishedNodes)
                {
                    unfinishedNodes.Remove(n);
                    n.Update(StepCount);
                    foreach (var o in n.OutNodes)
                    {
                        if (o == null) continue;
                        if (o.AreAllSet)
                        {
                            partiallyFinished.Remove(o);
                            if (o.LastStep != StepCount)
                                newlyFinished.Add(o);
                        }
                        else
                        {
                            partiallyFinished.Add(o);
                        }
                    }
                }

                finishedNodes = newlyFinished;
            }

            StepCount++;
        }
    }
}
