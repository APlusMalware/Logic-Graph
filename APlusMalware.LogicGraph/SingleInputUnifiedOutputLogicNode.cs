namespace APlusMalware.LogicGraph
{
    using System;

    /// <summary>
    /// A node with one input and unified output.
    /// </summary>
    /// <typeparam name="T">The type of the value of input and output.</typeparam>
    public abstract class SingleInputUnifiedOutputLogicNode<T> : UnifiedOutputLogicNode<T>
    {
        /// <summary>
        /// The input.
        /// </summary>
        private T _input;

        /// <summary>
        /// Gets the maximum number of inputs supported.
        /// </summary>
        public sealed override Int32 MaxInputCount { get { return 1; } }

        /// <summary>
        /// Gets the values of the input.
        /// </summary>
        public sealed override T[] InputValues
        {
            get
            {
                return new T[] { _input };
            }
        }

        /// <summary>
        /// Updates the output to the call to transform.
        /// </summary>
        protected sealed override void InternalUpdate()
        {
            T input = default(T);
            if (Inputs != null && Inputs[0].Active)
            {
                if (Inputs[0].Set)
                    input = Inputs[0].Value;
            }

            _input = input;

            SetAllOutputs(Transform(input));
        }

        /// <summary>
        /// Transforms the input to the output.
        /// </summary>
        /// <param name="original">The value.</param>
        /// <returns>The transformed value.</returns>
        protected abstract T Transform(T original);
    }
}
