using System;
using APlusMalware.LogicGraph;

namespace APlusMalware.LogicGraphConsoleExample
{
    class Program
    {
        static void Main(String[] args)
        {
            NoInputLogicNode<Byte> inputNode2 = new NoInputLogicNode<byte>();
            LogicNode<Byte> splitterNode1 = new LogicSplitter<byte>();
            LogicNode<Byte> maxNode1 = new LogicMaxSelector();
            LogicNode<Byte> splitterNode2 = new LogicSplitter<byte>();
            LogicNode<Byte> maxNode2 = new LogicMaxSelector();
            LogicNode<Byte> outputNode1 = new LogicConsoleWriter<byte>();
            LogicNode<Byte> outputNode2 = new LogicConsoleWriter<byte>();
            
            inputNode2.ConnectToHead(0, splitterNode1, 0);
            splitterNode1.ConnectToHead(0, maxNode1, 1);
            splitterNode1.ConnectToHead(1, maxNode2, 1);
            maxNode1.ConnectToHead(0, splitterNode2, 0);
            splitterNode2.ConnectToHead(2, maxNode1, 0);
            splitterNode2.ConnectToHead(0, maxNode2, 0);
            splitterNode2.ConnectToHead(1, outputNode1, 0);
            maxNode2.ConnectToHead(0, outputNode2, 0);

            Graph<Byte> graph = new Graph<byte>();
            graph.AddNode(inputNode2);
            graph.AddNode(splitterNode1);
            graph.AddNode(splitterNode2);
            graph.AddNode(maxNode1);
            graph.AddNode(maxNode2);
            graph.AddNode(outputNode1);
            graph.AddNode(outputNode2);

            inputNode2.SetOutput(13);
            graph.Step();
            inputNode2.SetOutput(32);
            graph.Step();
            graph.Step();
        }
    }

    public class LogicConsoleWriter<T> : SingleInputUnifiedOutputLogicNode<T>
    {
        public override int MaxOutputCount { get { return 0; } }

        protected override T Transform(T input)
        {
            Console.WriteLine(input);

            return input;
        }
    }


    public class LogicMaxSelector : TwoInputSingleOutputLogicNode<Byte>
    {
        protected override byte Transform(byte left, byte right)
        {
            return Math.Max(left, right);
        }
    }
}
