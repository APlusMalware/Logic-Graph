// <copyright file="Program.cs" company="aplusmalware.com">
//
// Copyright (c) 2016 A+ Malware
// All rights reserved. 
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software 
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// </copyright>
// <author>A+ Malware</author>

namespace APlusMalware.LogicGraphConsoleExample
{
    using System;
    using ByteLogic;

    /// <summary>
    /// The program.
    /// </summary>
    internal class Program
    {
        /// <summary>
        /// The main method.
        /// </summary>
        /// <param name="args">Command line arguments that are ignored.</param>
        private static void Main(String[] args)
        {
            var inputNode2 = new OnlyOutput();
            var splitterNode1 = new Splitter();
            var maxNode1 = new MaxFinder();
            var splitterNode2 = new Splitter();
            var maxNode2 = new MaxFinder();
            var outputNode1 = new LogicConsoleWriter<byte>();
            var outputNode2 = new LogicConsoleWriter<byte>();
            
            inputNode2.ConnectToHead(0, splitterNode1, 0);
            splitterNode1.ConnectToHead(0, maxNode1, 1);
            splitterNode1.ConnectToHead(1, maxNode2, 1);
            maxNode1.ConnectToHead(0, splitterNode2, 0);
            splitterNode2.ConnectToHead(2, maxNode1, 0);
            splitterNode2.ConnectToHead(0, maxNode2, 0);
            splitterNode2.ConnectToHead(1, outputNode1, 0);
            maxNode2.ConnectToHead(0, outputNode2, 0);

            Graph graph = new Graph();
            graph.AddNode(inputNode2);
            graph.AddNode(splitterNode1);
            graph.AddNode(splitterNode2);
            graph.AddNode(maxNode1);
            graph.AddNode(maxNode2);
            graph.AddNode(outputNode1);
            graph.AddNode(outputNode2);

            inputNode2.SetOutput(13);
            graph.Step();
            inputNode2.SetOutput(32);
            graph.Step();
            graph.Step();
        }
    }
}
