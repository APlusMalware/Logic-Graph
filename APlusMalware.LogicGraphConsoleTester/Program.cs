using System;
using APlusMalware.LogicGraph;

namespace APlusMalware.LogicGraphConsoleExample
{
    class Program
    {
        static void Main(String[] args)
        {
            NoInputLogicNode<Byte> inputNode1 = new NoInputLogicNode<byte>();
            NoInputLogicNode<Byte> inputNode2 = new NoInputLogicNode<byte>();
            LogicNode<Byte> splitterNode1 = new LogicSplitter<byte>();
            LogicNode<Byte> andNode1 = new LogicEqualityChecker();
            LogicNode<Byte> splitterNode2 = new LogicSplitter<byte>();
            LogicNode<Byte> andNode2 = new LogicEqualityChecker();
            LogicNode<Byte> outputNode = new LogicConsoleWriter<byte>();
            LogicNode<Byte> outputNode2 = new LogicConsoleWriter<byte>();

            inputNode1.RegisterOutputNode(0, andNode1, 0);
            inputNode2.RegisterOutputNode(0, splitterNode1, 0);
            splitterNode1.RegisterOutputNode(0, andNode1, 1);
            splitterNode1.RegisterOutputNode(1, andNode2, 1);
            andNode1.RegisterOutputNode(0, splitterNode2, 0);
            splitterNode2.RegisterOutputNode(0, andNode2, 0);
            splitterNode2.RegisterOutputNode(1, outputNode, 0);
            andNode2.RegisterOutputNode(0, outputNode2, 0);

            Graph<Byte> graph = new Graph<byte>();
            graph.AddNode(inputNode1);
            graph.AddNode(inputNode2);
            graph.AddNode(splitterNode1);
            graph.AddNode(splitterNode2);
            graph.AddNode(andNode1);
            graph.AddNode(andNode2);
            graph.AddNode(outputNode);
            graph.AddNode(outputNode2);

            inputNode1.Output = 123;
            inputNode2.Output = 213;
            graph.Step();

            inputNode1.Output = 23;
            inputNode2.Output = 13;
            graph.Step();
            graph.Step();
        }
    }

    public class LogicConsoleWriter<T> : SingleInputUnifiedOutputLogicNode<T>
    {
        public override int MaxOutputCount { get { return 0; } }

        protected override T Transform(T input)
        {
            Console.WriteLine(input);

            return input;
        }
    }


    public class LogicEqualityChecker : UnifiedOutputLogicNode<Byte>
    {
        public override int MaxOutputCount { get { return 1; } }

        public override int MaxInputCount { get { return 2; } }

        protected override void InternalUpdate()
        {
            Byte left = 0;
            Byte right = 0;
            if (Inputs != null && Inputs[0].Active)
            {
                if (Inputs[0].Set)
                    left = Inputs[0].Value;
            }
            if (Inputs != null && Inputs[1].Active)
            {
                if (Inputs[1].Set)
                    right = Inputs[1].Value;
            }
            SetAllOutputs(Math.Max(left, right));
            ResetInputs();
        }
    }
}
